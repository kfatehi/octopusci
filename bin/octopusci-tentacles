#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'rubygems'
require 'octopusci'
require 'trollop'
require 'etc'

SUB_COMMANDS = %w(start, restart, stop, help)

p = Trollop::Parser.new do
  version "Octopusci v#{Octopusci::Version} (c) Andrew De Ponte"
  banner """Usage: octopusci-tentacles [-v|--version|-h|--help] <subcommand>
  Acceptable SubCommands:
      start - Cleanup existing workers and start new worker processes in the background
       stop - Signals workers to exit when current job is finished
    restart - Synonym for the 'start' command, just here for convenience
       help - Display this help

  Available Options:
"""
  stop_on SUB_COMMANDS
end

opts = Trollop::with_standard_exception_handling(p) do
  o = p.parse ARGV
  raise Trollop::HelpNeeded if ARGV.empty? # show help screen
  o
end

def start_or_restart
  # The StageLocker.load() method is called here not only to set things into
  # valid initial state. But, also in the case that octopusci-tentacles was
  # killed it nukes the potentially screwed up state the redis data is in and
  # initializes it the proper state based on the config.
  if Octopusci::Config.has_key?('stages') && Octopusci::StageLocker.empty?
    puts "Reseting stage locker and loading stages in from config."
    Octopusci::StageLocker.load(Octopusci::Config['stages'])
  end

  Octopusci::WorkerLauncher.cleanup_existing_workers()
  Octopusci::WorkerLauncher.launch()
end

cmd = ARGV.shift # get the subcommand
case cmd
  when "start"
    start_or_restart()
  when "restart"
    start_or_restart()
  when "stop"
    Octopusci::WorkerLauncher.cleanup_existing_workers()
  when "help"
    p.educate
  else
    p.die "unknown subcommand #{cmd.inspect}", nil
end

